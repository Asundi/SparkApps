import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import com.mongodb.spark.MongoSpark
import org.bson.Document

object MongoSparkExample extends App {
  case class Row(_id: Double, name: String, model: String, city: String, state: String, country: String)
  val conf = new SparkConf().setMaster("local[2]").setAppName("Mongo Example");
  conf.set("spark.mongodb.input.uri", "mongodb://<mongo hostname>/<InputDbname>.<InputCollection>?readPreference=primaryPreferred");
  conf.set("spark.mongodb.output.uri", "mongodb://<mongo hostname>/<outputDbname>.<OutputCollection>")

  val sc = new SparkContext(conf)
  val data = MongoSpark.load(sc)
  val mydata = data.map(getRow)
  val result = mydata.map(getDoc)
  MongoSpark.save(result)

  def getDoc(row: Row): Document = {
    val document = new Document()
    document.append("_id", row._id)
    document.append("name", row.name)
    document.append("model", row.model)
    document.append("city", row.city)
    document.append("state", row.state)
    document.append("country", row.country)
  }

  def getRow(doc: Document): Row = {
    val row = Row(doc.getDouble("_id"), doc.getString("name"), doc.getString("model"), "Bangalore", "Karnataka", "India")
    row
  }
}

Example Program:

import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import com.mongodb.spark.MongoSpark
import org.bson.Document

object MongoSparkExample extends App {
  case class Row(_id: Double, name: String, model: String, city: String, state: String, country: String)
  val conf = new SparkConf().setMaster("local[2]").setAppName("Mongo Example");
  conf.set("spark.mongodb.input.uri", "mongodb://127.0.0.1/widas.vehicle?readPreference=primaryPreferred");
  conf.set("spark.mongodb.output.uri", "mongodb://127.0.0.1/widas.trip")

  val sc = new SparkContext(conf)
  val data = MongoSpark.load(sc)
  val mydata = data.map(getRow)
  val result = mydata.map(getDoc)
  MongoSpark.save(result)

  def getDoc(row: Row): Document = {
    val document = new Document()
    document.append("_id", row._id)
    document.append("name", row.name)
    document.append("model", row.model)
    document.append("city", row.city)
    document.append("state", row.state)
    document.append("country", row.country)
  }

  def getRow(doc: Document): Row = {
    val row = Row(doc.getDouble("_id"), doc.getString("name"), doc.getString("model"), "Bangalore", "Karnataka", "India")
    row
  }
}
